'use client'

import { useState, useEffect } from 'react'

interface Stats {
  participants: number
  hasMusician: boolean
  currentSong: {
    title: string
    artist: string
    linesCount: number
  } | null
  cache: {
    totalSongs: number
    sources: { [key: string]: number }
    recentSongs: Array<{
      id: string
      title: string
      artist: string
      cachedAt: string
    }>
  }
}

export default function AdminPage() {
  const [stats, setStats] = useState<Stats | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetchStats()
    const interval = setInterval(fetchStats, 5000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval)
  }, [])

  const fetchStats = async () => {
    try {
      const response = await fetch('http://localhost:3001/stats')
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
      const data = await response.json()
      setStats(data)
      setError(null)
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err)
    } finally {
      setLoading(false)
    }
  }

  const cleanupCache = async () => {
    try {
      const response = await fetch('http://localhost:3001/cache/cleanup', {
        method: 'POST'
      })
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞')
      await fetchStats() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à')
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', err)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 mb-4">‚ö†Ô∏è {error}</div>
          <button
            onClick={fetchStats}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  if (!stats) return null

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-blue-500 text-white p-4">
        <h1 className="text-xl font-bold">üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
      </div>

      <div className="p-4 space-y-6">
        {/* –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        <div className="bg-white rounded-lg p-6 shadow">
          <h2 className="text-lg font-semibold mb-4">üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.participants}</div>
              <div className="text-sm text-gray-600">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {stats.hasMusician ? '‚úÖ' : '‚ùå'}
              </div>
              <div className="text-sm text-gray-600">–ú—É–∑—ã–∫–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {stats.cache.totalSongs}
              </div>
              <div className="text-sm text-gray-600">–ü–µ—Å–µ–Ω –≤ –∫—ç—à–µ</div>
            </div>
          </div>
        </div>

        {/* –¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è */}
        {stats.currentSong && (
          <div className="bg-white rounded-lg p-6 shadow">
            <h2 className="text-lg font-semibold mb-4">üéµ –¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è</h2>
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="font-medium">{stats.currentSong.title}</div>
              <div className="text-sm text-gray-600">{stats.currentSong.artist}</div>
              <div className="text-xs text-gray-500 mt-1">
                {stats.currentSong.linesCount} —Å—Ç—Ä–æ–∫
              </div>
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ */}
        <div className="bg-white rounded-lg p-6 shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold">üíæ –ö—ç—à –ø–µ—Å–µ–Ω</h2>
            <button
              onClick={cleanupCache}
              className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600"
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
            </button>
          </div>
          
          {/* –ò—Å—Ç–æ—á–Ω–∏–∫–∏ */}
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-700 mb-2">–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
              {Object.entries(stats.cache.sources).map(([source, count]) => (
                <div key={source} className="bg-gray-50 rounded p-2 text-center">
                  <div className="font-medium">{count}</div>
                  <div className="text-xs text-gray-600">{source}</div>
                </div>
              ))}
            </div>
          </div>

          {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Å–Ω–∏ */}
          <div>
            <h3 className="text-sm font-medium text-gray-700 mb-2">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:</h3>
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {stats.cache.recentSongs.map((song) => (
                <div key={song.id} className="bg-gray-50 rounded p-3">
                  <div className="font-medium text-sm">{song.title}</div>
                  <div className="text-xs text-gray-600">{song.artist}</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {new Date(song.cachedAt).toLocaleString()}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="bg-white rounded-lg p-6 shadow">
          <h2 className="text-lg font-semibold mb-4">‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              onClick={fetchStats}
              className="p-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            </button>
            <button
              onClick={cleanupCache}
              className="p-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
            </button>
          </div>
        </div>
      </div>
    </div>
  )
} 